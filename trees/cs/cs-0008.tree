\title{Algebraic Graphs}
\date{2024-10-03}
\taxon{Graph Theory}
\import{macros}
\p{
    This post focus on the the algebra of graphs introduced in paper \strong{Algebraic graphs with class (functional pearl)},
    which built on rigorous mathematical foundation that allows us to apply equational reasoning for proving the correctness of graph transformation algorithms.
}
\subtree{
    \title{Introduction to Graphs}
    \p{
        Graphs are ubiquitous in computing. Roughly speaking, a graph is a collection of vertices and edges, where each edge connects two vertices.
        For the most trivial case, a graph is an ordered pair #{ G=(V,E)} comprising:
        \ul{
            \li{#{ V } is a set of vertices.}
            \li{#{ E \subseteq \{ (x,y) \mid x, y \in V\} } is a set of edges.}
        }
        We can define a graph type in some programming languages (e.g. Haskell) as:
        \codeblock{language-haskell}{data Graph a = Graph [a] [(a, a)]}
        Work with such low-level fiddling with sets of vertices and edges is very painful. And we can easily construct a graph that breaks the invariant of the graph structure like \code{Graph [1] [(1,2)]} which has an edge connecting a non-existent vertex.
    }
    \p{
        How the state-of-art libraries deal with this problem? 
        The \strong{container} library in Haskell provides a type \code{Data.Graph} which represents graph using adjacency array:
        \codeblock{language-haskell}{type Graph a = Array a [a]}
        which ensures performance and generality. But the consistency invariant is not \strong{statically} checked, which may lead
        to runtime errors like \code{index out of ranges}. Another approach is the \strong{fgl} (Martin Erwig's Functional Graph Library)
        where the graph is introduced as an \strong{inductive type}. The approach is very complex and its API contains partial functions.
        So is there a \strong{safe} graph construction interface we can build on top?
    }
    \p{
        \strong{Andrey Mokhov}'s paper presents a new interface for constructing and transforming graphs in a safe and convenient manner.
        And abstract away from the actual representation details and characterize graphs by a set of axioms, just like numbers are algebraically characterized
        by rings. The core calculus is based on the algebra of parameterized graphs. Algebraic graphs have a safe and minimalistic core of four graph construction primitives, as captured by the following data type:
        \codeblock{language-haskell}{\startverb
        data Graph a
            = Empty
            | Vertex a
            | Overlay (Graph a) (Graph a)
            | Connect (Graph a) (Graph a)
        \stopverb}
    }
    \p{
        The \code{Empty} and \code{Vertex} construct the empty and single-vertex graphs respectively. \code{Overlay} composes two graphs by taking the union of their vertices and edges, and \code{Connect} is similar to \code{Overlay} but also creates edges between vertices of the two graphs. 
        
        The overlay and connect operations have three properties:
        \ul{
            \li{(Closure)  They are closed on the set of graphs (all total functions)}
            \li{(Complete) They can be used to construct any graph starting from the empty and single-vertex graphs}
            \li{(Sound) Malformed graphs are impossible to construct}
        }
    }
}
\subtree{
    \title{Core of Algebraic Graphs}
    \subtree{
        \title{Graph Construction}
        \p{
            The simplest possible graph is the empty graph. We denote it by #{ \epsilon = (\varnothing, \varnothing) }.
            A graph with a single vertex is #{ \text{Vertex} x = (\{x\}, \varnothing) }.
            To construct larger graphs from the above primitives we define binary operations overlay and connect, denoted by #{ + } and #{ \to } respectively.
            The overlay operation #{ + } is defined as:
            ##{
                (V_1, E_1) + (V_2, E_2) = (V_1 \cup V_2, E_1 \cup E_2)
            }
            The connect operation #{ \to } is defined similarly (We give it a higher precedence than #{ + }):
            ##{
                (V_1, E_1) \to (V_2, E_2) = (V_1 \cup V_2, E_1 \cup E_2 \cup V_1 \times V_2)
            }
        }
        \p{
            As shown above, the core can be represented by a simple data type \code{Graph}, parameterized by the type of vertices \code{a}.
            We can push this further by defining a type class \code{GraphLike} that captures the core operations of the algebraic graph.
        }
    }
    \subtree{
        \title{Type Class}
        \p{
            We abstract the graph construction primitives defined above as the type class Graph (Note that associated types requires \code{TypeFamilies} GHC extension):
            \codeblock{language-haskell}{\startverb
            class Graph g where
                type Vertex g
                empty :: g
                vertex :: Vertex g -> g
                overlay :: g -> g -> g
                connect :: g -> g -> g
            \stopverb}
        }
        \p{
            This interface is very simple and easy to use, which allows fewer opportunities for usage errors and greater opportunities for reuse.
            Now let's create some functions to construct graphs. For instance, a single edge is obtained by connecting two vertices:
            \codeblock{language-haskell}{\startverb
            edge :: (Graph g) => Vertex g -> Vertex g -> g
            edge x y = connect (vertex x) (vertex y)
            \stopverb}
        }
        \p{
            A graph that contains a given list of isolated vertices can be constructed as follows:
            \codeblock{language-haskell}{\startverb
            vertices :: Graph g => [Vertex g] -> g
            vertices = foldr (overlay . vertex) empty
            \stopverb}
            which turns each vertex into a singleton graph and overlay the results. By replacing the 
            \code{ overlay } with \code{ connect } we can construct a full connected graph.
            \codeblock{language-haskell}{\startverb
            clique :: (Graph g) => [Vertex g] -> g
            clique = foldr (connect . vertex) empty
            \stopverb}
        }
        \p{
            The graph construction functions defined above are total, fully polymorphic, and elegant. 
            Thanks to the minimalistic core type class, it is easy to wrap our favourite graph library into the described interface, 
            and reuse the functions defined with graph class.
        }
    }
}
\subtree{
    \title{Algebraic Structure}
    \p{
        In this section we characterise the \code{Graph} type class with a set of axioms that reveal an algebraic structure very similar to a semiring. This provides a convenient framework for proving graph properties, using equational reasoning. The presented characterization is generally useful for formal verification, as well as automated testing of graph library APIs.
    }
    \subtree{
        \title{Axioms}
        \p{
            Notice that the \code{clique} and \code{vertices} functions use #{\epsilon} as the identity element for the overlay and connect operation respectively.
            Further more we can verify:
            \ul{
                \li{#{(G,+,\epsilon)} is an idempotent commutative monoid.}
                \li{#{(G,\to,\epsilon)} is a monoid.}
                \li{#{\to} distributes over #{+}.}
            }
            This looks like a semiring, but the identity element are shared between the two operations. 
            What makes the algebra of graphs different is the \strong{decomposition law}:
            ##{
                x \to y \to z = x \to y + x \to z + y \to z
            }
            Interestingly, the fact that overlay and connect share the same identity follows from the decomposition law.
            Furthermore, the identity (#{x + \epsilon = x}) and idempotence (#{x + x = x}) can also be proved from the decomposition law.
            Hence we get a minimal set (8) of axioms that characterize the algebraic graphs.
            \ul{
                \li{#{+} is commutative and associative: #{x + y = y + x} and #{(x + y) + z = x + (y + z)}}
                \li{#{(G,\to,\epsilon)} is a monoid, i.e. #{x \to y \to z = x \to (y \to z)} and #{\epsilon \to x = x, x \to \epsilon = x}}
                \li{#{\to} distributes over #{+}: #{(x + y) \to z = x \to z + y \to z}}
                \li{Decomposition law: #{x \to y \to z = x \to y + x \to z + y \to z}}
            }
            By adding more axioms we can obtain more complex graphs such as directed graphs, hypergraphs, etc.
        }
        \p{
            Algebraic graphs are \strong{complete} in the sense that it is possible to describe any graph using the core interface. Indeed, given a graph #{G=(V , E)} we can construct it as \code{graph V E}, where the function \code{graph} is defined as follows.
            \codeblock{language-haskell}{\startverb
            graph :: (Graph g) => [Vertex g] -> [(Vertex g, Vertex g)] -> g
            graph vs es = overlay (vertices vs) (edges es)
            \stopverb}
            where \code{edges} is defined as:
            \codeblock{language-haskell}{\startverb
            edges :: (Graph g) => [(Vertex g, Vertex g)] -> g
            edges = foldr (overlay . uncurry edge) empty
            \stopverb}
            The absorption theorem #{x \to y + x + y = x \to y}, derived from decomposition of #{x \to y \to \epsilon}, states that an edge #{(u, v)} 
            contains its two vertices #{u, v} and is inseparable from them. Therefore, if the pair #{(V , E)} is inconsistent, the set of vertices #{V} 
            will be expanded to #{\hat{V}} so that #{E\subseteq \hat{V} \times \hat{V}} holds. More generally, the absorption theorem states that in 
            addition to being complete, the algebraic graph API is also sound in the sense that it is impossible to construct an inconsistent pair
            #{(V , E)} using the four Graph methods.
        }
        \p{
            There are many other interesting properties of algebraic graphs can be proved using the axioms:
            \ul{
                \li{(Overlay Identity) #{x + \epsilon = x}}
                \li{(Overlay Idempotence) #{x + x = x}}
                \li{(Absorption) #{x \to y + x + y = x \to y}}
                \li{(Saturation) #{x \to x \to x = x \to x}}
            }
        }
    }
    \subtree{
        \title{Partial Order}
        \p{
            It is fairly standard to define #{x \leq y} as #{x + y = y} for an idempotent operation #{+}, since it gives a [partial order](def-000Y) on the elements of the algebra. Formally we call this definition the \strong{subgraph} relation. Therefore, we can check if a graph is a subgraph of another one if we know how to compare graphs for equality.
            \codeblock{language-haskell}{\startverb
            isSubgraphOf :: (Graph g, Eq g) => g -> g -> Bool
            isSubgraphOf x y = overlay x y == y
            \stopverb}
        }
    }
}
\subtree{
    \title{Graphs à la Carte}
    \p{
        Now we define some instances of the Grpah, and extend the axioms to construct more complex graphs.
    }
    \subtree{
        \title{Binary Relation}
        \p{
            We start by a direct encoding of the graph construction primitives defined into the abstract data type \code{Relation} isomorphic to a pair of sets #{(V , E)}: 
            \codeblock{language-haskell}{\startverb
            data Relation a = R {domain :: Set a, relation :: Set (a, a)} deriving (Eq)

            instance (Ord a) => Graph (Relation a) where
                type Vertex (Relation a) = a
                empty = R Set.empty Set.empty
                vertex x = R (singleton x) Set.empty
                overlay x y = R (domain x `union` domain y) (relation x `union` relation y)
                connect x y =
                    R (domain x `union` domain y)
                    ( relation x
                        `union` relation y
                        `union` fromAscList [(a, b) | a <- elems (domain x), b <- elems (domain y)]
                    )
            \stopverb}
            As we have seen, this implementation satisfies the axioms of the graph algebra. Furthermore, it is a free graph in the sense that it does not satisfy any other laws. This follows from the fact that any algebraic graph expression #{g} can be rewritten in the following canonical form:
            ##{
                g = \left( \sum_{v\in V_g} v \right) + \left( \sum_{(u,v)\in E_g} u \to v \right)
            }
            The existence of the canonical form was proved by \strong{Mokhov} in \em{Algebra of Parameterised Graphs} for an extended version of the algebra.
            The core idea is to repeatedly apply the decomposition law to rewrite the graph expression in the form of the above equation,
            until no further decomposition is possible.
        }
        \p{
            It will be convenient to make \code{Relation} an instance of \code{Num} type class.
            \codeblock{language-haskell}{\startverb
            instance (Ord a, Num a) => Num (Relation a) where
                fromInteger = vertex . fromInteger
                (+) = overlay
                (*) = connect
                signum = const empty
                abs = id
                negate = id
            \stopverb}
            With these setups we can use the standard #{+} and #{\times} operators as shortcuts for overlay and connect respectively.
            Note that the Num law \code{abs x * signum x == x} is satisfied by the above definition since #{x \to \epsilon = x}.
            Any Graph instance can be made an instance of \code{Num} if needed.
        }
        \p{
            Now let's try to construct some graphs using the \code{Relation} type and the \code{Num} instance:
            \codeblock{language-haskell}{\startverb
            ghci> 1 * (2 + 3) :: Relation Int
            R {domain = fromList [1,2,3], relation = fromList [(1,2),(1,3)]}
            ghci> 1 * 2 * 3 :: Relation Int
            R {domain = fromList [1,2,3], relation = fromList [(1,2),(1,3),(2,3)]}
            \stopverb}
        }
    }
}
% \subtree{
%     \title{Graph Transformation}
%     \p{
%         Any instances of \code{Graph} can benefit from a library of polymorphic graph construction and transformation.
%         It will be useful to have \code{functor} and \code{monad} instances for the \code{Graph} type class.
%     }
%     \subtree{Graph Functor}
%     \p{
%         We now implement a function \code{gmap} that given a function \code{a -> b} and a polymorphic graph whose vertices are of type \code{a} will produce a polymorphic graph with vertices of type \code{b} by applying the function to each vertex. This is almost a \code{Functor} but it does not have the usual type signature, because Graph is not a higher-kinded type but a type class (Though it is possible to define a higher-kinded version of \code{Graph}, but 
%         the instances are much more restricted).
%     }
% }