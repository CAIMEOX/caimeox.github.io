\title{Identity Types}
\taxon{Type Theory}
\date{2024-01-31}
\import{macros}
\p{
    This post discuss the identity types in type theory.
    Refer to [Introduction to Homotopy Type Theory](hott-2022).
}
\p{
    How can we think of \strong{equality} in type theory?
    Mentioned before, given a type #{A} and two its elements #{a,b:A}
    we can define a new type #{a=_Ab} which is called the \strong{identity type}.
    In this case, a term of #{a=_Ab} is said to be a \em{witness} of the equality of #{a} and #{b}.
    And this witness is itself a type.
    We can then define their equality.
    This gives every type a \strong{groupoid structure}.
}
\transclude{def-002N}
\subtree{
    \title{The groupoid structure of types}
    \p{
        The identifications can be \strong{concatenated} and \strong{inverted},
        which implies the \em{transitivity} and \em{symmetry} of the identity type.
    }
    \transclude{def-002O}
    \transclude{def-002P}
    \p{
        It is natural to ask whether the identity type is \em{reflexive}.
        In the case of associativity we should ask to compare the identifications:
        ##{
            (p\cdot q)\cdot r \quad\text{and}\quad p\cdot(q\cdot r)
        }
        for any #{p:x=y}, #{q:y=z} and #{r:z=w} in a type #{A}. Both #{ (p\cdot q)\cdot r} and 
        #{p\cdot(q\cdot r)} are elements of type #{x=w}. We can ask whether there is an
        identification
        ##{
            (p\cdot q)\cdot r = p\cdot(q\cdot r)
        }
    }
    \transclude{def-002W}
    \transclude{def-002X}
}
\subtree{
    \title{The action on identifications of functions}
    \p{
        Every function preserves identifications.
    }
    \transclude{def-004C}
    \p{
        To construct dependent action on paths if a dependent function #{f:\Pi_{(x:A)}B(x)}.
        We need a \strong{transport} because type theory can not distinguish between identified 
        elements from different types.
    }
    \transclude{def-004D}
}
\subtree{
    \title{Uniqueness of refl}
    \p{
        The identity type is an inductive family of types.
        For instance, while the type #{a=x} indexed by #{x:A} is inductively generated by #{\refl_a},
        the type #{a=a} is \strong{not}, because the endpoint of #{p:a=a} is not free. 
        We want to show that #{p=\refl_a} for all #{p:a=a}. 
    }
    \p{
        Nevertheless the identity type #{a=x} is generated by a single element #{\refl_a:a=a},
        so it is natural to wonder in \em{what sense} the reflexivity identification is unique.
        We prove that only one pair #{(a,\refl_a)} is unique in the type of all pairs:
        ##{
            (x,p):\Sigma_(x:A) a = x 
        }
        We restate this as a proposition: Consider an element #{a:A}. Then there is an identification
        #{(a, \refl_a = y)} in the type #{\Sigma_(x:A) a = x} for any #{y:\Sigma_(x:A) a = x }
    }
    \proof{
        By #{\Sigma} induction it suffices to show that there is an identification
        ##{
            (a, \refl_a) = (x, p)
        }
        forall #{x:A} and #{p:a=x}. Then perform the induction principle of identity types.
        It suffices to show that
        ##{
            (a,\refl_a) = (a, \refl_a)
        }
        which can be obtained by reflexivity.
    }
}
