\title{Identity Type}
\taxon{Definition}
\import{macros}
\p{
    The \strong{identity type} is an inductive type,
    generated by just a \strong{reflexivity} \em{identification}
    that providing an equality of a term with itself.
}
\p{
    Consider a type #{A} and let #{a:A} be an element.
    The identity type of #{A} at #{a} is an inductive family of types #{a=_Ax} 
    indexed by #{x:A}.
    ##{
        \frac{
            \Gamma\vdash a:A
        }{
            \Gamma,x:A\vdash a=_Ax\type
        }
    }
    The only constructor is the refl:
    ##{
        \frac{
            \Gamma\vdash a:A
        }{
            \Gamma\vdash \refl_a:a=_Ax
        }
    }
}
\block{\strong{
    Path Induction / Identification Elimination
}}{
    The induction principle of the identity type states that
    for any type family #{P(x,p)} indexed by #{x:A} and #{p:a=_Ax},
    ##{
        \indeq{a}:P(a, \refl_a)\to (x:A)\to (p:a=_Ax)\to P(x,p)
    }
    satisfies #{\indeq{a}(u,a,\refl_a)\equiv u} where #{u:P(a,\refl_a)}.
    Formally we can write:
    ##{
        \frac{
            \Gamma\vdash a:A,\quad \Gamma,x:A,p:a=_Ax\vdash P(x,p)\type
        }{
            \Gamma\vdash \indeq{a}(a,\refl_a): P(a,\refl_a) \to (x:A)\to (p:a=_Ax)\to P(x,p)
        }\text{eq-elim}
    }
    ##{
        \frac{
            \Gamma\vdash a:A,\quad \Gamma,x:A,p:a=_Ax\vdash P(x,p)\type
        }{
            \Gamma,u:P(a,\refl_a)\vdash \indeq{a}(u,a,\refl_a)\equiv u:P(a,\refl_a)
        }\text{eq-comp}
    }

}
\p{
    A term of #{a=_Ax} is called a \strong{identification} of #{a} and #{x},
    or the \strong{path} from #{a} to #{x}.
}
\block{\strong{Variable Version}}{
    We can form an identity type with variables of #{A}.
    ##{
        \Gamma,x:A,y:A\vdash x=_Ay\type
    }
    with the following introduction rule:
    ##{
        \frac{
            \Gamma,x:A\vdash x:A
        }{
            \Gamma,x:A\vdash \refl_x:x=_Ax
        }
    }
    and similarly the elimination rule and computation rule.
}